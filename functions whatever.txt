entity = the vehicle base entity, NOT THE SEAT


------ shared
entity:GetSteerSpeed()	-- returns a number
entity:GetFastSteerConeFadeSpeed()	-- returns a number
entity:GetFastSteerAngle()	-- returns a number

entity:GetFrontSuspensionHeight()	-- returns a number
entity:GetRearSuspensionHeight()	-- returns a number

entity:GetEngineSoundPreset()	-- returns a number

entity:GetRPM() -- gets the current engine rpm. returns a number

entity:GetIdleRPM()	-- returns a number
entity:GetLimitRPM()	-- returns a number
entity:GetPowerBandStart()	-- returns a number
entity:GetPowerBandEnd()	-- returns a number
entity:GetMaxTorque()	-- returns a number
entity:GetRevlimiter() -- returns a bool

entity:GetTurboCharged() -- returns a bool
entity:GetSuperCharged() -- returns a bool
entity:GetBackFire() -- returns a bool
entity:GetDoNotStall() -- returns a bool

entity:GetClutch() -- returns a number
entity:GetThrottle() -- returns a number

entity:GetGear() -- returns a number  (1 = reverse, 2 = neutral, 3 = first gear, 4 = second gear, 5 = third gear, ..., ...)
entity:GetDifferentialGear() -- returns a number 

entity:GetBrakePower() -- returns a number
entity:GetPowerDistribution() -- returns a number (1 = rear wheel drive, -1 = front wheel drive, 0 = all wheel drive with power distributed equally on front and rear wheels)
entity:GetEfficiency() -- returns a number
entity:GetMaxTraction() -- returns a number
entity:GetTractionBias() -- returns a number
entity:GetTireSmokeColor() -- returns a vector

entity:GetIsCruiseModeOn() -- returns a bool,  is the cruise control enabled?
entity:GetIsBraking() -- returns true when braking
entity:GetLightsEnabled() -- returns true when the lowbeams are active
entity:GetLampsEnabled() -- returns true when the highbeams are active

entity:GetEMSEnabled() -- returns true when the emergency system is active

entity:GetFogLightsEnabled() -- returns true when the fog lights are active
entity:GetHandBrakeEnabled() -- returns true when the handbrake is active

entity:GetVehicleSteer() -- returns a number, (from -1 to 1, its used for the steering poseparameter for the player)
entity:GetDriver() -- returns an entity
entity:GetDriverSeat() -- returns an entity
entity:GetActive() -- returns true when the vehicle is active. note that the engine can still be inactive even when the vehicle itself is active

entity:GetSpawn_List() -- returns the vehicle spawnname as string
entity:GetLights_List() -- returns the lights listname as string

entity:GetSoundoverride() -- returns an string

entity:GetCurHealth()  -- returns the current health as number
entity:GetMaxHealth()  -- returns the max health as number


-- server
entity:DisableLights()  -- removes all lights from the inbuild lighting system
entity:SteerVehicle( number ) -- sets the angle of the steering
entity:Lock()  -- locks the vehicle
entity:UnLock() -- unlocks the vehicle

entity:StopEngine()	-- stops the engine
entity:StartEngine( bKeepGear = false )  -- starts the engine and resets to neutral gear if bKeepGear is nil or false
entity:StallAndRestart( ntime = 1, bKeepGear = false )  -- stalls the engine and restarts it after set amount of time.

entity:DamagedStall() -- stalls the engine and restarts with backfiring

entity:SetMaxHealth( nHealth ) -- sets the max health
entity:SetCurHealth( nHealth ) -- sets the current health



entity:SetControl( table ) -- controls the vehicle (only works without driver when the vehicle is active)

for example: 

entity:SetActive( true )  -- this will turn the vehicle on

local Data = {
	["W"] = true,
	["S"] = true,
}
entity:SetControl( Data )

car should do an burnout now

available controls are:

"M1" = gearup
"M2" = geardown
		
"W" = throttle, forward
"S" = throttle, reverse

"aW" = air control, forward
"aS" = air control, reverse

"aA" = air control, left
"aD" = air control, right
"Shift" = halfthrottle
"Alt" = clutch
"Space" = handbrake
